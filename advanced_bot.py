import logging
import os
import random
import io
from PIL import Image
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7940460925:AAG3YzhTVOKyiWnUp970Rb9hqTf1dls7myg"
ADMIN_ID = 754033812

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
MAIN_MENU, PLAYING_SOUND_GAME, PLAYING_WORD_GAME, WAITING_PHOTO = range(4)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
SOUNDS = {
    "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å": "sounds/car_horn.mp3",
    "üö® –°–∏—Ä–µ–Ω–∞": "sounds/siren.mp3",
    "üê¶ –ü—Ç–∏—Ü—ã": "sounds/birds.mp3"
}

WORDS = {
    "–ñ–∏–≤–æ—Ç–Ω—ã–µ": ["—Å–ª–æ–Ω", "–∂–∏—Ä–∞—Ñ", "–ø–∞–Ω–¥–∞"],
    "–¢–µ—Ö–Ω–∏–∫–∞": ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫", "–Ω–∞—É—à–Ω–∏–∫–∏"]
}

# –ú–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üéÆ –£–≥–∞–¥–∞–π –∑–≤—É–∫", callback_data='sound_game')],
        [InlineKeyboardButton("üî† –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", callback_data='word_game')],
        [InlineKeyboardButton("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data='recognize_text')],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(keyboard)

### –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ###
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu()
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'sound_game':
        return await start_sound_game(update, context)
    elif query.data == 'word_game':
        return await start_word_game(update, context)
    elif query.data == 'recognize_text':
        await query.edit_message_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º")
        return WAITING_PHOTO
    elif query.data == 'help':
        await query.edit_message_text("üÜò –ü–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        await context.bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    elif query.data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    
    return MAIN_MENU

### –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π –∑–≤—É–∫" ###
async def start_sound_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['game'] = {
        'type': 'sound',
        'score': 0,
        'round': 1,
        'total_rounds': 3
    }
    return await play_sound_round(update, context)

async def play_sound_round(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game = context.user_data['game']
    sound_name, sound_file = random.choice(list(SOUNDS.items()))
    
    with open(sound_file, 'rb') as f:
        await update.callback_query.message.reply_audio(audio=f)
    
    options = random.sample(list(SOUNDS.keys()), 3)
    if sound_name not in options:
        options[0] = sound_name
    
    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"sound_{opt}")] for opt in options
    ]
    keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='end_game')])
    
    await update.callback_query.edit_message_text(
        f"üîä –†–∞—É–Ω–¥ {game['round']}/3. –ß—Ç–æ —ç—Ç–æ –∑–∞ –∑–≤—É–∫?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    context.user_data['correct_answer'] = sound_name
    return PLAYING_SOUND_GAME

async def check_sound_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_answer = query.data.replace("sound_", "")
    game = context.user_data['game']
    
    if user_answer == context.user_data['correct_answer']:
        game['score'] += 1
        result = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        result = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {context.user_data['correct_answer']}"
    
    game['round'] += 1
    
    if game['round'] > game['total_rounds']:
        return await end_game(update, context)
    
    await query.edit_message_text(
        f"{result}\n–°—á–µ—Ç: {game['score']}/{game['round']-1}\n\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='next_round')]])
    )
    return PLAYING_SOUND_GAME

### –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" ###
async def start_word_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = random.choice(list(WORDS.keys()))
    word = random.choice(WORDS[category])
    
    context.user_data['game'] = {
        'type': 'word',
        'word': word,
        'hints_used': 0,
        'letters_guessed': []
    }
    
    await update.callback_query.edit_message_text(
        f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üî° –°–ª–æ–≤–æ: {'_ ' * len(word)}\n"
        f"‚ùî –£–≥–∞–¥–∞–π—Ç–µ –±—É–∫–≤—É –∏–ª–∏ –≤—Å—ë —Å–ª–æ–≤–æ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
    )
    return PLAYING_WORD_GAME

async def handle_word_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game = context.user_data['game']
    user_input = update.message.text.lower()
    
    if user_input == game['word']:
        await update.message.reply_text(f"üéâ –í–µ—Ä–Ω–æ! –≠—Ç–æ —Å–ª–æ–≤–æ '{game['word']}'")
        return await end_game(update, context)
    
    if len(user_input) == 1 and user_input.isalpha():
        if user_input in game['word']:
            if user_input not in game['letters_guessed']:
                game['letters_guessed'].append(user_input)
            await update.message.reply_text(f"‚úÖ –ë—É–∫–≤–∞ '{user_input}' –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ!")
        else:
            await update.message.reply_text(f"‚ùå –ë—É–∫–≤—ã '{user_input}' –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ")
    
    masked_word = ' '.join(
        letter if letter in game['letters_guessed'] else '_'
        for letter in game['word']
    )
    await update.message.reply_text(
        f"–°–ª–æ–≤–æ: {masked_word}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {game['hints_used']}/3",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
    )
    return PLAYING_WORD_GAME

async def give_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    game = context.user_data['game']
    
    if game['hints_used'] < 3:
        game['hints_used'] += 1
        hidden_letters = [letter for letter in game['word'] if letter not in game['letters_guessed']]
        hint_letter = random.choice(hidden_letters)
        game['letters_guessed'].append(hint_letter)
        
        masked_word = ' '.join(
            letter if letter in game['letters_guessed'] else '_'
            for letter in game['word']
        )
        
        await query.edit_message_text(
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–∫–≤–∞ '{hint_letter}'\n"
            f"–°–ª–æ–≤–æ: {masked_word}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {game['hints_used']}/3",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='hint')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    else:
        await query.answer("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏!", show_alert=True)
    
    return PLAYING_WORD_GAME

### –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ###
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo_file = await update.message.photo[-1].get_file()
        img_data = io.BytesIO()
        await photo_file.download_to_memory(img_data)
        
        img = Image.open(img_data).convert('L')
        img.save("temp.jpg")
        
        with open("temp.jpg", 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption="üìÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç:",
                has_spoiler=True
            )
        
        os.remove("temp.jpg")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ")
    
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    return MAIN_MENU

### –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ###
async def end_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    game = context.user_data['game']
    if game['type'] == 'sound':
        await update.callback_query.edit_message_text(
            f"üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {game['score']}/{game['total_rounds']}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back')]])
        )
    else:
        await update.callback_query.edit_message_text(
            "üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back')]])
        )
    return MAIN_MENU

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(handle_main_menu)],
            PLAYING_SOUND_GAME: [
                CallbackQueryHandler(check_sound_answer, pattern='^sound_'),
                CallbackQueryHandler(end_game, pattern='^end_game$'),
                CallbackQueryHandler(play_sound_round, pattern='^next_round$')
            ],
            PLAYING_WORD_GAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_word_guess),
                CallbackQueryHandler(give_hint, pattern='^hint$'),
                CallbackQueryHandler(handle_main_menu, pattern='^back$')
            ],
            WAITING_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CallbackQueryHandler(handle_main_menu, pattern='^back$')
            ]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: u.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"))]
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == '__main__':
    main()